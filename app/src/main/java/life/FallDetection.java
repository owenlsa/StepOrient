package life;

import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.support.annotation.WorkerThread;
import android.util.Log;

import org.tensorflow.lite.Interpreter;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;

public class FallDetection {
    private final Context context;
    private static final String TAG = "FallDetection";

    // tflite模型文件名
    private static final String MODEL_PATH = "fallDetection.tflite";
    // tflite解释器
    private Interpreter tfliteInterpreter;

    public FallDetection(Context context) {
        this.context = context;
    }

    /**
     * 摔倒检测模型主函数
     * @return 是否摔倒
     */
    public synchronized boolean fallModel(float[] dataList) {
        load();
        boolean FALL_RESULT = fallDetect(dataList);
        return FALL_RESULT;
    }

    /*
     * 获取数组中最大值索引
     * */
    private boolean isFall(float[] data) {
        float max = -1000000;
        int maxID = -1;
        int possibleCount = 0;
        for (int i=0; i<data.length; i++) {
            if ((data[i]) > max) {
                max = data[i];
                maxID = i;
            }
            if (data[i] > 0) {
                possibleCount++;
            }
        }
        if (maxID == 0) { // 最大值索引为0时代表判断了FALL的类型
//        if (possibleCount == 1 && maxID == 0) { // 最大值索引为0且仅FALL可能性大于0
            return true;
        } else {
            return false;
        }
    }


    /**
     * 读取模型
     */
    @WorkerThread
    public void load() {
        loadModel();
    }

    /*
     * 读取tflite模型
     * */
    @WorkerThread
    private synchronized void loadModel() {
        try {
            ByteBuffer buffer = loadModelFile(this.context.getAssets());
            tfliteInterpreter = new Interpreter(buffer);
            Log.v(TAG, "TFLite model loaded.");
        } catch (IOException ex) {
            Log.e(TAG, ex.getMessage());
        }
    }

    /**
     * 释放tflite解释器
     */
    @WorkerThread
    public synchronized void unload() {
        tfliteInterpreter.close();
    }

    /**
     * 摔倒检测函数
     */
    @WorkerThread
    public synchronized boolean fallDetect(float[] dataList) {
        float[] input = dataList;
        boolean FALL_RESULT = false;
        float[][] output = new float[1][8]; // 模型输出格式 float[1][8]
//        float[] input_new = {143,143,144,144,143,143,143,144,144,145,145,145,144,143,143,143,143,143,143,143,143,142,141,141,141,141,142,142,143,144,145,145,146,146,146,147,147,147,147,146,144,142,140,137,131,127,126,132,140,148,156,161,161,157,153,147,139,131,135,138,140,142,147,150,151,154,160,162,161,159,156,156,157,156,156,156,156,158,159,160,160,159,157,155,154,153,152,150,148,146,147,159,186,210,220,189,105,61,74,112,135,133,133,133,124,116,118,128,140,149,154,155,152,145,143,145,149,150,145,138,131,130,131,133,133,133,131,127,113,95,91,82,83,100,117,114,94,73,55,44,43,52,58,65,71,77,79,80,80,81,85,88,87,80,74,71,71,77,86,96,106,113,117,118,112,106,99,94,90,88,89,91,94,97,101,104,105,105,102,99,96,94,93,93,95,97,98,100,101,103,104,104,104,103,102,101,101,100,100,100,121,121,121,120,119,118,118,118,118,118,118,118,118,118,118,117,116,115,115,115,115,115,115,115,115,114,114,115,115,116,116,116,116,115,115,116,116,117,118,120,122,124,125,126,126,125,126,130,134,139,142,145,141,138,139,131,128,127,124,125,131,135,133,128,125,125,126,125,122,116,111,108,107,107,108,109,110,110,110,109,106,104,103,103,104,106,107,108,109,109,106,104,102,109,140,125,88,58,79,95,96,103,100,92,86,86,87,89,90,88,86,84,80,78,78,80,81,78,71,65,64,65,69,73,77,81,84,83,77,67,54,48,49,56,74,108,129,117,94,88,97,103,107,108,106,102,100,101,106,114,120,125,128,128,125,122,119,119,120,121,121,120,120,120,121,123,125,126,125,122,121,120,120,120,121,121,121,120,119,119,119,120,120,121,121,122,121,121,120,120,120,120,120,120,120,120,120,120,120,120,169,169,170,170,169,169,169,169,169,169,170,172,173,173,173,172,172,171,170,169,169,169,169,169,169,168,167,166,166,166,165,165,164,164,163,161,160,158,157,156,155,154,152,150,142,136,131,129,129,130,134,140,150,159,161,158,151,147,144,144,147,153,156,157,158,158,159,160,162,160,159,159,161,162,165,166,165,165,164,163,162,162,162,163,164,164,166,167,167,165,165,185,210,223,230,228,205,167,158,152,146,144,140,133,127,122,120,120,124,132,144,155,164,172,180,189,198,203,196,186,174,163,155,146,141,139,136,133,127,120,112,93,93,111,131,152,166,177,179,166,141,134,133,136,140,142,144,143,142,139,140,145,150,155,154,150,144,139,136,135,135,136,139,143,150,155,158,159,159,158,157,155,153,151,149,149,148,149,150,152,153,155,156,156,156,155,155,154,154,153,152,151,150,150,151,152,153,153,154,153,118,118,117,115,115,115,116,116,117,117,118,118,119,119,120,120,120,119,119,119,119,119,119,118,118,118,118,120,121,122,123,122,121,121,121,121,122,123,124,126,129,132,134,137,138,138,139,139,141,136,124,101,80,58,44,57,91,111,115,111,109,113,120,121,123,122,119,119,120,124,126,125,124,124,124,125,127,128,128,128,129,130,133,135,136,137,137,135,134,132,134,142,155,151,48,0,155,249,250,213,164,141,125,112,109,122,143,157,155,142,131,123,120,124,128,131,129,126,130,139,142,142,137,133,128,121,111,99,93,104,118,132,141,146,138,122,118,125,122,117,122,134,138,138,136,134,126,115,110,110,109,106,103,103,110,118,124,126,127,125,121,116,114,113,113,115,119,121,122,125,127,126,124,124,122,120,118,117,117,118,118,118,119,119,120,120,120,120,120,120,120,120,119,119,119,120,121,121,121,121,100,100,101,101,101,101,100,99,98,98,97,97,97,97,97,97,98,98,98,99,99,98,98,99,99,99,98,97,96,95,95,95,96,97,97,98,98,98,99,99,100,101,103,107,108,104,99,91,85,82,81,84,94,109,124,128,111,102,90,79,74,78,85,87,88,90,96,98,99,100,97,93,88,85,82,82,85,91,98,106,111,110,105,100,98,99,104,109,114,117,112,97,69,93,161,190,179,133,80,73,74,70,80,91,91,89,88,91,101,111,116,114,111,103,101,103,110,117,115,108,100,93,89,91,100,115,136,160,184,197,191,173,165,160,161,177,193,207,215,211,199,194,188,185,185,188,194,197,195,192,192,194,193,187,174,161,153,150,152,157,163,167,167,166,163,160,159,159,159,159,161,163,164,165,165,165,166,165,164,164,165,165,165,164,164,164,163,162,162,161,161,162,162,163,163,163,163,163,163,163,120,121,121,122,122,122,121,121,120,120,120,119,119,119,119,119,119,119,120,120,120,121,120,120,120,121,121,121,121,122,122,122,122,122,123,124,126,128,130,132,132,131,130,129,128,126,124,125,133,145,153,152,149,143,142,142,139,136,135,135,133,132,132,132,131,131,131,129,126,123,121,119,118,118,117,116,114,113,111,109,107,106,105,104,103,102,102,102,103,104,104,105,113,129,133,122,112,83,83,88,92,91,88,86,82,77,74,75,77,80,85,89,94,95,95,94,94,92,89,84,79,75,73,72,73,75,80,87,93,96,94,89,79,74,83,100,107,103,93,87,88,101,107,110,112,116,118,120,120,121,121,122,122,123,123,123,121,121,123,126,128,130,130,128,127,125,123,121,120,119,118,118,119,119,121,122,123,123,123,122,122,121,121,121,121,121,122,122,122,122,122,123,123,123,123,123,122,122,122,122};
        // tflite解释器运行和释放
        tfliteInterpreter.run(input, output);
        unload();

        float[] resultProb = output[0]; // 模型输出变形为 float[8]
        FALL_RESULT = isFall(resultProb);
        if (FALL_RESULT) {
            FALL_RESULT = true;
            Log.d(TAG, "fallDetect: " + resultProb.toString());
        }
        return FALL_RESULT;
    }

    /**
     * 从assets文件夹中获取tflite文件
     */
    private static MappedByteBuffer loadModelFile(AssetManager assetManager) throws IOException {
        try (AssetFileDescriptor fileDescriptor = assetManager.openFd(MODEL_PATH);
             FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor())) {
            FileChannel fileChannel = inputStream.getChannel();
            long startOffset = fileDescriptor.getStartOffset();
            long declaredLength = fileDescriptor.getDeclaredLength();
            return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
        }
    }
}
